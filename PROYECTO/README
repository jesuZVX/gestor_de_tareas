# Proyecto: Gestor de Tareas y Proyectos

### Descripci칩n General:
Sistema de escritorio desarrollado en **Python** con **PyQt6**, orientado a la **gesti칩n de proyectos, tareas y usuarios**.
El sistema permite a administradores y colaboradores gestionar sus proyectos, tareas asignadas y notificaciones.

---

## Tecnolog칤as utilizadas:
- **Python 3.11**
- **PyQt6** (para interfaz gr치fica)
- **SQLAlchemy** (ORM para base de datos)
- **SQLite** (base de datos local)
- **bcrypt** (hash de contrase침as)

---

## Estructura del Proyecto:
```
PROYECTO-IA/
|
|-- backend/
|    |-- database.py
|    |-- models.py
|    |-- auth.py
|
|-- frontend/
|    |-- login.py
|    |-- registro.py
|    |-- recuperar.py
|    |-- panel_principal.py (PanelAdmin)
|    |-- panel_usuario.py
|    |-- portada.py
|
|-- archivos_tareas/  (archivos adjuntos de tareas)
|-- imagenes/         (logo, iconos, fondo inicio)
|-- main_app.py
|-- README.md
|-- style.qss
```

---

## Funcionalidades ya implementadas:

### 1. Autenticaci칩n
- Registro de usuarios.
- Inicio de sesi칩n.
- Recuperaci칩n de contrase침a (con env칤o simulado).
- Roles: **admin** y **colaborador**.

### 2. Panel Administrador (PanelAdmin)
- Ver proyectos creados.
- Crear nuevos proyectos.
- Editar proyectos existentes.
- Eliminar proyectos (eliminaci칩n l칩gica).
- Ver tareas creadas dentro de los proyectos.
- Mostrar progreso del proyecto (% completado).
- Notificaciones (b치sico).

### 3. Tareas
- Visualizar tareas asignadas.
- Editar tareas (t칤tulo, descripci칩n, fecha de vencimiento, estado).
- Subida de archivos asociados a tareas (Word, PDF, PNG, JPG).
- Eliminaci칩n l칩gica de tareas.

### 4. Interfaz gr치fica
- Estilo moderno: paleta verde/blanco/gris.
- Barra lateral.
- Cards para proyectos y tareas.
- Fondo general de la app amigable.

---

## Funcionalidades pendientes:


### 1. Mejoras de funcionalidades
- Panel de colaborador (칰nicamente ver proyectos/tareas asignadas).
- Notificaciones m치s avanzadas (diferenciar vistas le칤das / no le칤das).
- Crear tareas desde el proyecto directamente.
- Asignar tareas a usuarios espec칤ficos.
- Sistema de prioridades en tareas (alta, media, baja).
- Subida de m칰ltiples archivos por tarea (opcional).

### 2. Seguridad
- Validaciones m치s estrictas en campos.
- Manejo de errores global (para que la app nunca crashee).

### 3. Extras visuales
- Animaciones suaves al cambiar de pantalla.
- Mejorar la vista de notificaciones.

### 4. Base de Datos
- Migrar la base de datos de SQLite a MySQL si se quiere escalar.

---

## Plan de tareas inmediatas:
- [x] Corregir `panel_principal.py` (ya hecho)
- [ ] Crear `panel_usuario.py`
- [ ] Integrar roles (admin / colaborador) en `main_app.py`
- [ ] Mejorar gesti칩n de archivos adjuntos
- [ ] Terminar secci칩n de notificaciones
- [ ] Crear dashboard de colaborador (visualizar tareas asignadas)

---

# 游늳 Estado Actual del Proyecto: 
**70% Completado.**

**游늰 Fecha estimada de finalizaci칩n:** 1 semana si seguimos este ritmo. 

---

# Autor:
**Jesus zambramo, jose peralta**
